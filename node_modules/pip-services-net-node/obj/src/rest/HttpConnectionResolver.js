"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
let async = require('async');
const pip_services_commons_node_1 = require("pip-services-commons-node");
const pip_services_commons_node_2 = require("pip-services-commons-node");
class HttpConnectionResolver {
    constructor() {
        this._connectionResolver = new pip_services_commons_node_1.ConnectionResolver();
    }
    setReferences(references) {
        this._connectionResolver.setReferences(references);
    }
    configure(config) {
        this._connectionResolver.configure(config);
    }
    validateConnection(correlationId, connection) {
        if (connection == null)
            return new pip_services_commons_node_2.ConfigException(correlationId, "NO_CONNECTION", "HTTP connection is not set");
        let uri = connection.getUri();
        if (uri != null)
            return null;
        let protocol = connection.getProtocol("http");
        if ("http" != protocol) {
            return new pip_services_commons_node_2.ConfigException(correlationId, "WRONG_PROTOCOL", "Protocol is not supported by REST connection")
                .withDetails("protocol", protocol);
        }
        let host = connection.getHost();
        if (host == null)
            return new pip_services_commons_node_2.ConfigException(correlationId, "NO_HOST", "Connection host is not set");
        let port = connection.getPort();
        if (port == 0)
            return new pip_services_commons_node_2.ConfigException(correlationId, "NO_PORT", "Connection port is not set");
        return null;
    }
    composeOptions(connection) {
        let protocol = connection.getProtocol();
        let host = connection.getHost();
        let port = connection.getPort();
        let uri = connection.getUri();
        if (uri == null) {
            uri = protocol + "://" + host;
            if (port != 0)
                uri += ':' + port;
        }
        let result = {
            uri: uri,
            protocol: protocol,
            host: host,
            port: port
        };
        return result;
    }
    resolve(correlationId, callback) {
        let connection;
        async.parallel([
            (callback) => {
                this._connectionResolver.resolve(correlationId, (err, result) => {
                    connection = result;
                    // Validate connection
                    if (err == null)
                        err = this.validateConnection(correlationId, connection);
                    callback(err);
                });
            },
        ], (err) => {
            if (err)
                callback(err, null);
            else {
                let options = this.composeOptions(connection);
                callback(null, options);
            }
        });
    }
    register(correlationId, callback) {
        this._connectionResolver.resolve(correlationId, (err, connection) => {
            // Validate connection
            if (err == null)
                err = this.validateConnection(correlationId, connection);
            if (err == null)
                this._connectionResolver.register(correlationId, connection, callback);
            else
                callback(err);
        });
    }
}
exports.HttpConnectionResolver = HttpConnectionResolver;
//# sourceMappingURL=HttpConnectionResolver.js.map