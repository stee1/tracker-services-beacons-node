import { IOpenable } from 'pip-services-commons-node';
import { IConfigurable } from 'pip-services-commons-node';
import { IReferenceable } from 'pip-services-commons-node';
import { IReferences } from 'pip-services-commons-node';
import { ConfigParams } from 'pip-services-commons-node';
import { DependencyResolver } from 'pip-services-commons-node';
import { CompositeLogger } from 'pip-services-commons-node';
import { CompositeCounters } from 'pip-services-commons-node';
import { Timing } from 'pip-services-commons-node';
import { Schema } from 'pip-services-commons-node';
import { HttpConnectionResolver } from './HttpConnectionResolver';
export declare abstract class RestService implements IOpenable, IConfigurable, IReferenceable {
    private static readonly _defaultConfig;
    protected _server: any;
    protected _connectionResolver: HttpConnectionResolver;
    protected _dependencyResolver: DependencyResolver;
    protected _logger: CompositeLogger;
    protected _counters: CompositeCounters;
    protected _uri: string;
    configure(config: ConfigParams): void;
    setReferences(references: IReferences): void;
    protected instrument(correlationId: string, name: string): Timing;
    isOpened(): boolean;
    open(correlationId: string, callback?: (err: any) => void): void;
    close(correlationId: string, callback?: (err: any) => void): void;
    protected sendResult(req: any, res: any): (err: any, result: any) => void;
    protected sendCreatedResult(req: any, res: any): (err: any, result: any) => void;
    protected sendDeletedResult(req: any, res: any): (err: any, result: any) => void;
    protected sendError(req: any, res: any, error: any): void;
    protected registerRoute(method: string, route: string, schema: Schema, action: (req: any, res: any) => void): void;
    protected register(): void;
}
