"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('chai').assert;
var async = require('async');
var ConfigParams_1 = require("../../src/config/ConfigParams");
var ConnectionParams_1 = require("../../src/connect/ConnectionParams");
var ConnectionResolver_1 = require("../../src/connect/ConnectionResolver");
var References_1 = require("../../src/refer/References");
suite('ConnectionResolver', function () {
    var RestConfig = ConfigParams_1.ConfigParams.fromTuples("connection.protocol", "http", "connection.host", "localhost", "connection.port", 3000);
    test('Configure', function () {
        var connectionResolver = new ConnectionResolver_1.ConnectionResolver(RestConfig);
        var configList = connectionResolver.getAll();
        assert.equal(configList[0].get("protocol"), "http");
        assert.equal(configList[0].get("host"), "localhost");
        assert.equal(configList[0].get("port"), "3000");
    });
    test('Register', function (done) {
        var connectionParams = new ConnectionParams_1.ConnectionParams();
        var connectionResolver = new ConnectionResolver_1.ConnectionResolver(RestConfig);
        async.series([
            function (callback) {
                connectionResolver.register("correlationId", connectionParams, function (err) {
                    assert.isNull(err);
                    var configList = connectionResolver.getAll();
                    assert.equal(configList.length, 1);
                    callback();
                });
            },
            function (callback) {
                connectionResolver.register("correlationId", connectionParams, function (err) {
                    assert.isNull(err);
                    var configList = connectionResolver.getAll();
                    assert.equal(configList.length, 1);
                    callback();
                });
            },
            function (callback) {
                connectionParams.setDiscoveryKey("Discovery key value");
                var references = new References_1.References();
                connectionResolver.setReferences(references);
                connectionResolver.register("correlationId", connectionParams, function (err) {
                    assert.isNull(err);
                    var configList = connectionResolver.getAll();
                    assert.equal(configList.length, 2);
                    assert.equal(configList[0].get("protocol"), "http");
                    assert.equal(configList[0].get("host"), "localhost");
                    assert.equal(configList[0].get("port"), "3000");
                    //assert.equal(configList[0].get("discovery_key"), "Discovery key value");
                    callback();
                });
            }
        ], done);
    });
    test('Resolve', function (done) {
        async.series([
            function (callback) {
                var connectionResolver = new ConnectionResolver_1.ConnectionResolver(RestConfig);
                connectionResolver.resolve("correlationId", function (err, connectionParams) {
                    assert.isNull(err);
                    assert.equal(connectionParams.get("protocol"), "http");
                    assert.equal(connectionParams.get("host"), "localhost");
                    assert.equal(connectionParams.get("port"), "3000");
                    callback();
                });
            },
            function (callback) {
                var RestConfigDiscovery = ConfigParams_1.ConfigParams.fromTuples("connection.protocol", "http", "connection.host", "localhost", "connection.port", 3000, "connection.discovery_key", "Discovery key value");
                var references = new References_1.References();
                var connectionResolver = new ConnectionResolver_1.ConnectionResolver(RestConfigDiscovery, references);
                connectionResolver.resolve("correlationId", function (err, connectionParams) {
                    assert.isNotNull(err);
                    assert.isNull(connectionParams);
                    callback();
                });
            }
        ], done);
    });
});
//# sourceMappingURL=ConnectionResolver.test.js.map