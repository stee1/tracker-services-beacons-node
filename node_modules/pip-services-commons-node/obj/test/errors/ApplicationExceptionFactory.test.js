"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('chai').assert;
var StringValueMap_1 = require("../../src/data/StringValueMap");
var ErrorCategory_1 = require("../../src/errors/ErrorCategory");
var ErrorDescription_1 = require("../../src/errors/ErrorDescription");
var ApplicationExceptionFactory_1 = require("../../src/errors/ApplicationExceptionFactory");
var UnknownException_1 = require("../../src/errors/UnknownException");
var InternalException_1 = require("../../src/errors/InternalException");
var ConfigException_1 = require("../../src/errors/ConfigException");
var ConnectionException_1 = require("../../src/errors/ConnectionException");
var InvocationException_1 = require("../../src/errors/InvocationException");
var FileException_1 = require("../../src/errors/FileException");
var BadRequestException_1 = require("../../src/errors/BadRequestException");
var UnauthorizedException_1 = require("../../src/errors/UnauthorizedException");
var ConflictException_1 = require("../../src/errors/ConflictException");
var NotFoundException_1 = require("../../src/errors/NotFoundException");
var UnsupportedException_1 = require("../../src/errors/UnsupportedException");
suite('ApplicationExceptionFactory', function () {
    var _descr;
    var checkProperties = function (ex) {
        assert.isNotNull(ex);
        assert.equal(_descr.cause, ex.cause);
        assert.equal(_descr.stack_trace, ex.stack_trace);
        assert.equal(_descr.details, ex.details);
        assert.equal(_descr.category, ex.category);
    };
    beforeEach(function () {
        _descr = new ErrorDescription_1.ErrorDescription();
        _descr.correlation_id = "correlationId";
        _descr.code = "code";
        _descr.message = "message";
        _descr.status = 777;
        _descr.cause = "cause";
        _descr.stack_trace = "stackTrace";
        var map = new StringValueMap_1.StringValueMap();
        map.put("key", "value");
        _descr.details = map;
    });
    test('Create From Unknown', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Unknown;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof UnknownException_1.UnknownException);
    });
    test('Create From Internal', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Internal;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof InternalException_1.InternalException);
    });
    test('Create From Misconfiguration', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Misconfiguration;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof ConfigException_1.ConfigException);
    });
    test('Create From No Response', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.NoResponse;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof ConnectionException_1.ConnectionException);
    });
    test('Create From Failed Invocation', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.FailedInvocation;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof InvocationException_1.InvocationException);
    });
    test('Create From No File Access', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.FileError;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof FileException_1.FileException);
    });
    test('Create From Bad Request', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.BadRequest;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof BadRequestException_1.BadRequestException);
    });
    test('Create From From Unauthorized', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Unauthorized;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof UnauthorizedException_1.UnauthorizedException);
    });
    test('Create From Conflict', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Conflict;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof ConflictException_1.ConflictException);
    });
    test('Create From Not Found', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.NotFound;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof NotFoundException_1.NotFoundException);
    });
    test('Create From Unsupported', function () {
        _descr.category = ErrorCategory_1.ErrorCategory.Unsupported;
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof UnsupportedException_1.UnsupportedException);
    });
    test('Create From Default', function () {
        _descr.category = "any_other";
        var ex = ApplicationExceptionFactory_1.ApplicationExceptionFactory.create(_descr);
        checkProperties(ex);
        assert.isTrue(ex instanceof UnknownException_1.UnknownException);
    });
});
//# sourceMappingURL=ApplicationExceptionFactory.test.js.map