"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('chai').assert;
var async = require('async');
var MemoryCache_1 = require("../../src/cache/MemoryCache");
var ConfigParams_1 = require("../../src/config/ConfigParams");
suite('MemoryCache', function () {
    var cache = null;
    var key1 = "key1";
    var key2 = "key2";
    var key3 = "key3";
    var value1 = "value1";
    var value2 = "value2";
    var value3 = "value3";
    setup(function (done) {
        cache = new MemoryCache_1.MemoryCache();
        async.series([
            function (callback) {
                cache.store(null, key1, value1, 1000, function (err, val) {
                    callback();
                });
            },
            function (callback) {
                cache.store(null, key2, value2, 1000, function (err, val) {
                    callback();
                });
            }
        ], done);
    });
    test('Retrieve Both Value In 500 ms', function (done) {
        async.series([
            function (callback) {
                setTimeout(function () {
                    callback();
                }, 500);
            },
            function (callback) {
                cache.retrieve(null, key1, function (err, val) {
                    assert.isNotNull(val);
                    assert.equal(value1, val);
                    callback();
                });
            },
            function (callback) {
                cache.retrieve(null, key2, function (err, val) {
                    assert.isNotNull(val);
                    assert.equal(value2, val);
                    callback();
                });
            }
        ], done);
    });
    test('Retrieve Both Value In 1500 ms Fails', function (done) {
        async.series([
            function (callback) {
                setTimeout(function () {
                    callback();
                }, 1500);
            },
            function (callback) {
                cache.retrieve(null, key1, function (err, val) {
                    assert.isNull(val);
                    callback();
                });
            },
            function (callback) {
                cache.retrieve(null, key2, function (err, val) {
                    assert.isNull(val);
                    callback();
                });
            }
        ], done);
    });
    test('Store Returns Same Value', function (done) {
        cache.store(null, key3, value3, 0, function (err, val) {
            assert.isNull(err);
            assert.equal(value3, val);
            done();
        });
    });
    test('Stored Value Is Stored', function (done) {
        async.series([
            function (callback) {
                cache.store(null, key3, value3, 1000, function (err, val) {
                    callback();
                });
            },
            function (callback) {
                cache.retrieve(null, key3, function (err, val) {
                    assert.isNotNull(val);
                    assert.equal(value3, val);
                    callback();
                });
            }
        ], done);
    });
    test('Removed Value Is Removed', function (done) {
        async.series([
            function (callback) {
                cache.remove(null, key1, function (err) {
                    callback();
                });
            },
            function (callback) {
                cache.retrieve(null, key1, function (err, val) {
                    assert.isNull(val);
                    callback();
                });
            }
        ], done);
    });
    test('Configure New Value Stays For 1500 ms But Fails For 2500 ms', function (done) {
        var config = ConfigParams_1.ConfigParams.fromTuples("timeout", 2000);
        cache.configure(config);
        async.series([
            function (callback) {
                cache.store(null, key3, value3, 0, function (err, val) {
                    callback();
                });
            },
            function (callback) {
                setTimeout(function () {
                    callback();
                }, 1500);
            },
            function (callback) {
                cache.retrieve(null, key3, function (err, val) {
                    assert.isNotNull(val);
                    assert.equal(value3, val);
                    callback();
                });
            },
            function (callback) {
                setTimeout(function () {
                    callback();
                }, 1000);
            },
            function (callback) {
                cache.retrieve(null, key3, function (err, val) {
                    assert.isNull(val);
                    callback();
                });
            }
        ], done);
    });
});
//# sourceMappingURL=MemoryCache.test.js.map