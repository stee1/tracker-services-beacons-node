"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('chai').assert;
var async = require('async');
var ConfigParams_1 = require("../../src/config/ConfigParams");
var CredentialResolver_1 = require("../../src/auth/CredentialResolver");
var References_1 = require("../../src/refer/References");
suite('CredentialResolver', function () {
    var RestConfig = ConfigParams_1.ConfigParams.fromTuples("credential.username", "Negrienko", "credential.password", "qwerty", "credential.access_key", "key", "credential.store_key", "store key");
    test('Configure', function (done) {
        var credentialResolver = new CredentialResolver_1.CredentialResolver(RestConfig);
        var configList = credentialResolver.getAll();
        assert.equal(configList[0].get("username"), "Negrienko");
        assert.equal(configList[0].get("password"), "qwerty");
        assert.equal(configList[0].get("access_key"), "key");
        assert.equal(configList[0].get("store_key"), "store key");
        done();
    });
    test('Lookup', function (done) {
        async.series([
            function (callback) {
                var credentialResolver = new CredentialResolver_1.CredentialResolver();
                credentialResolver.lookup("correlationId", function (err, credential) {
                    assert.isNull(credential);
                    callback(err);
                });
            },
            function (callback) {
                var RestConfigWithoutStoreKey = ConfigParams_1.ConfigParams.fromTuples("credential.username", "Negrienko", "credential.password", "qwerty", "credential.access_key", "key");
                var credentialResolver = new CredentialResolver_1.CredentialResolver(RestConfigWithoutStoreKey);
                credentialResolver.lookup("correlationId", function (err, credential) {
                    assert.equal(credential.get("username"), "Negrienko");
                    assert.equal(credential.get("password"), "qwerty");
                    assert.equal(credential.get("access_key"), "key");
                    assert.isNull(credential.get("store_key"));
                    callback(err);
                });
            },
            function (callback) {
                var credentialResolver = new CredentialResolver_1.CredentialResolver(RestConfig);
                credentialResolver.lookup("correlationId", function (err, credential) {
                    assert.isNull(credential);
                    callback(err);
                });
            },
            function (callback) {
                var credentialResolver = new CredentialResolver_1.CredentialResolver(RestConfig);
                credentialResolver.setReferences(new References_1.References());
                credentialResolver.lookup("correlationId", function (err, credential) {
                    assert.isNotNull(err);
                    assert.isNull(credential);
                    callback();
                });
            }
        ], done);
    });
});
//# sourceMappingURL=CredentialResolver.test.js.map