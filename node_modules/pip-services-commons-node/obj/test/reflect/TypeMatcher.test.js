"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require('chai').assert;
var TypeCode_1 = require("../../src/convert/TypeCode");
var TypeMatcher_1 = require("../../src/reflect/TypeMatcher");
suite('TypeMatcher', function () {
    test('Match Integer', function () {
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("int", 123));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("Integer", 123));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.Long, 123));
    });
    test('Match Boolean', function () {
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("bool", true));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("Boolean", true));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.Boolean, true));
    });
    test('Match Double', function () {
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("double", 123.456));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("Double", 123.456));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.Double, 123.456));
    });
    test('Match String', function () {
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("string", "ABC"));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.String, "ABC"));
    });
    test('Match DateTime', function () {
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("date", new Date()));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("DateTime", new Date()));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.DateTime, new Date()));
    });
    test('Match Map', function () {
        var map = {};
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("map", map));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("dict", map));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("Dictionary", map));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.Map, map));
    });
    test('Match Array', function () {
        var array = [];
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("list", array));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("array", array));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValueByName("object[]", array));
        assert.isTrue(TypeMatcher_1.TypeMatcher.matchValue(TypeCode_1.TypeCode.Array, array));
    });
});
//# sourceMappingURL=TypeMatcher.test.js.map